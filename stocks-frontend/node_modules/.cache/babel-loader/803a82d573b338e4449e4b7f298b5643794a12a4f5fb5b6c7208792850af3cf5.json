{"ast":null,"code":"var _jsxFileName = \"/Users/cheekati_karthik/Desktop/JAVA/Restful/stocks-fullstack/stocks-frontend/src/AuthContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState, useEffect, useCallback } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  // Check auth status from backend\n  const checkAuth = useCallback(() => {\n    setLoading(true);\n    return fetch(\"http://localhost:8080/auth/validate\", {\n      credentials: \"include\"\n    }).then(res => setIsAuthenticated(res.ok)).catch(() => setIsAuthenticated(false)).finally(() => setLoading(false));\n  }, []);\n  useEffect(() => {\n    checkAuth();\n  }, [checkAuth]);\n\n  // Logout function - clear client state and inform backend to clear session\n  const logout = () => {\n    // Clear any stored tokens if you use localStorage (adjust if needed)\n    localStorage.removeItem(\"jwtToken\");\n\n    // Optimistically update state\n    setIsAuthenticated(false);\n\n    // Call backend logout to clear cookies/session\n    fetch(\"http://localhost:8080/auth/logout\", {\n      method: \"POST\",\n      credentials: \"include\"\n    }).finally(() => {\n      // Optionally re-check auth to confirm logged out state\n      checkAuth();\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      setIsAuthenticated,\n      loading,\n      refreshAuth: checkAuth,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"5WeN8/izPE0VFf3tVsuq0x4Tm+0=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","useCallback","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","isAuthenticated","setIsAuthenticated","loading","setLoading","checkAuth","fetch","credentials","then","res","ok","catch","finally","logout","localStorage","removeItem","method","Provider","value","refreshAuth","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/cheekati_karthik/Desktop/JAVA/Restful/stocks-fullstack/stocks-frontend/src/AuthContext.js"],"sourcesContent":["import { createContext, useState, useEffect, useCallback } from \"react\";\n\nexport const AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  // Check auth status from backend\n  const checkAuth = useCallback(() => {\n    setLoading(true);\n    return fetch(\"http://localhost:8080/auth/validate\", { credentials: \"include\" })\n      .then((res) => setIsAuthenticated(res.ok))\n      .catch(() => setIsAuthenticated(false))\n      .finally(() => setLoading(false));\n  }, []);\n\n  useEffect(() => {\n    checkAuth();\n  }, [checkAuth]);\n\n  // Logout function - clear client state and inform backend to clear session\n  const logout = () => {\n    // Clear any stored tokens if you use localStorage (adjust if needed)\n    localStorage.removeItem(\"jwtToken\");\n\n    // Optimistically update state\n    setIsAuthenticated(false);\n\n    // Call backend logout to clear cookies/session\n    fetch(\"http://localhost:8080/auth/logout\", {\n      method: \"POST\",\n      credentials: \"include\",\n    }).finally(() => {\n      // Optionally re-check auth to confirm logged out state\n      checkAuth();\n    });\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        isAuthenticated,\n        setIsAuthenticated,\n        loading,\n        refreshAuth: checkAuth,\n        logout,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExE,OAAO,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAE1C,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;;EAE5C;EACA,MAAMa,SAAS,GAAGX,WAAW,CAAC,MAAM;IAClCU,UAAU,CAAC,IAAI,CAAC;IAChB,OAAOE,KAAK,CAAC,qCAAqC,EAAE;MAAEC,WAAW,EAAE;IAAU,CAAC,CAAC,CAC5EC,IAAI,CAAEC,GAAG,IAAKP,kBAAkB,CAACO,GAAG,CAACC,EAAE,CAAC,CAAC,CACzCC,KAAK,CAAC,MAAMT,kBAAkB,CAAC,KAAK,CAAC,CAAC,CACtCU,OAAO,CAAC,MAAMR,UAAU,CAAC,KAAK,CAAC,CAAC;EACrC,CAAC,EAAE,EAAE,CAAC;EAENX,SAAS,CAAC,MAAM;IACdY,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC;;EAEf;EACA,MAAMQ,MAAM,GAAGA,CAAA,KAAM;IACnB;IACAC,YAAY,CAACC,UAAU,CAAC,UAAU,CAAC;;IAEnC;IACAb,kBAAkB,CAAC,KAAK,CAAC;;IAEzB;IACAI,KAAK,CAAC,mCAAmC,EAAE;MACzCU,MAAM,EAAE,MAAM;MACdT,WAAW,EAAE;IACf,CAAC,CAAC,CAACK,OAAO,CAAC,MAAM;MACf;MACAP,SAAS,CAAC,CAAC;IACb,CAAC,CAAC;EACJ,CAAC;EAED,oBACET,OAAA,CAACC,WAAW,CAACoB,QAAQ;IACnBC,KAAK,EAAE;MACLjB,eAAe;MACfC,kBAAkB;MAClBC,OAAO;MACPgB,WAAW,EAAEd,SAAS;MACtBQ;IACF,CAAE;IAAAd,QAAA,EAEDA;EAAQ;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACvB,EAAA,CAhDWF,YAAY;AAAA0B,EAAA,GAAZ1B,YAAY;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}